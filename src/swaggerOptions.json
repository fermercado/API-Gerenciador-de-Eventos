{
  "openapi": "3.1.0",
  "info": {
    "title": "Challenge-3-Node-AWS",
    "description": "Model Documentatio for challenger 3",
    "termsOfService": "",
    "contact": {
      "email": "fermercado@live.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/users/sign-up": {
      "post": {
        "summary": "Create User",
        "description": "This route will create a new user",
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              },
              "examples": {
                "CreateUser": {
                  "value": {
                    "firstName": "Maria",
                    "lastName": "Silva",
                    "birthDate": "1988-01-11",
                    "city": "São Paulo",
                    "country": "Brasil",
                    "email": "maria@gmail.com",
                    "password": "password",
                    "confirmPassword": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUser"
                },
                "example": {
                  "firstName": "Maria",
                  "lastName": "Silva",
                  "birthDate": "1988-01-11",
                  "city": "São Paulo",
                  "country": "Brasil",
                  "email": "maria@gmail.com"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "type":"Validation Error",
                  "errors": [
                    {"field": "email", "message": "Email already in use"}
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode": 500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/sign-in": {
      "post": {
        "summary": "User Login",
        "description": "This route will authenticate a user and provide a token",
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequest"
              },
              "examples": {
                "LoginUser": {
                  "value": {
                    "email": "maria@gmail.com",
                    "password": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {      
          "400": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "type":"Validation Error",
                  "errors": [
                    {"field": "email", "message": "Invalid email"},
                    {"field": "password", "message": "Invalid password"}
                  ]
                }
              }
            }
          },
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUserResponse"
                },
                "example": {
                  "token": "your_generated_token_here",
                  "firstName": "Maria",
                  "lastName": "Silva",
                  "email": "maria@gmail.com"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode": 500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events": {
      "post": {
        "summary": "Create Event",
        "description": "Create a new event.",
        "tags": ["Events"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvent"
              },
              "examples": {
                "CreateEvent": {
                  "value": {
                    "description": "Event Description",
                    "dayOfWeek": "monday"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                "example": {
                  "statusCode":401,
                  "error": "Unauthorized",
                  "message": "Not Authenticated"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "type":"Validation Error",
                  "statusCode":400,
                  "errors": [
                    {"field": "description", "message": "Description is required"},
                    {"field": "dayOfWeek", "message": "Day of week is required"}
                  ]
                }
              }
            }
          },
         "200": {
        "description": " Successfull operation",
        "content": {
          "application/json": {
            "example":{
              "_id": "string",
              "descripiton": "string",
              "dayOfWeek": "sunday",
              "userId": "string"
            }
          }
        }
      },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode":500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Events",
        "description": "Get events for the authenticated user.",
        "tags": ["Events"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dayOfWeek",
            "in": "query",
            "description": "Filter events by day of the week",
            "schema": {
              "type": "string",
              "enum": ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search for events by their description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyMyEvents",
            "in": "query",
            "description": "Search only for events created by the authenticated user",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specify the page of results to retrieve",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Specify the number of events to return per page",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1
            }
          }
        ],
  
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                "example": {
                  "statusCode": 401,
                  "error": "Unauthorized",
                  "message": "Not Authenticated"
                }
              }
            }
          },
          "404": {
            "description": "Event Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "statusCode": 404,
                  "error": "Not Found",
                  "message": "Event not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode": 500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Events",
        "description": "Delete all events for the authenticated user.",
        "tags": ["Events"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dayOfWeek",
            "in": "query",
            "description": "Filter events by day of the week",
            "schema": {
              "type": "string",
              "enum": ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                "example": {
                  "statusCode":401,
                  "error": "Unauthorized",
                  "message": "Not Authenticated"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "statusCode": 400,
                  "error": "Bad Request",
                  "message": "Invalid day of the week."
                }
              }
            }
          },
          "404": {
            "description": "Event Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "statusCode": 404,
                  "error": "Not Found",
                  "message": "No events found for deletion."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode": 500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          },
          "200": {
            "description": "List of deleted events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedEvents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    }
                  }
                },
                "example": {
                  "deletedEvents": [
                    {
                      "_id": "string",
                      "description": "string",
                      "dayOfWeek": "sunday",
                      "userId": "string"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/{id}": {
      "get": {
        "summary": "Get Event by ID",
        "description": "Get a specific event by its ID.",
        "tags": ["Events"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "statusCode":401,
                  "error": "Unauthorized",
                  "message": "Not Authenticated"
                }
              }
            }
          },
          "404": {
            "description": "Event Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "statusCode": 404,
                  "error": "Not Found",
                  "message": "No events found for deletion."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode": 500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Event by ID",
        "description": "Delete a specific event by its ID.",
        "tags": ["Events"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer"
                    },
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "statusCode": 401,
                  "error": "Unauthorized",
                  "message": "Not Authenticated"
                }
              }
            }
          },
          "200": {
            "description": "Event deleted",
            "content": {
              "application/json": {
                "example": { 
                  "statusCode": 200,
                  "message": "Event deleted "
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "statusCode": 400,
                  "error": "Bad Request",
                  "message": "Invalid Id"
                }
              }
            }
          },
          "404": {
            "description": "Event Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "statusCode": 404,
                  "error": "Not Found",
                  "message": "Not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "statusCode": 500,
                  "error": "Internal Server Error",
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
        
      }
    }
  },
    "components": {
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "CreateUser": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string",
              "example": "Maria",
              "description": "First name of the user"
            },
            "lastName": {
              "type": "string",
              "example": "Silva",
              "description": "Last name of the user"
            },
            "birthDate": {
              "type": "string",
              "format": "date",
              "example": "1988-01-11",
              "description": "Birth date of the user in YYYY-MM-DD format"
            },
            "city": {
              "type": "string",
              "example": "São Paulo",
              "description": "City of residence of the user"
            },
            "country": {
              "type": "string",
              "example": "Brasil",
              "description": "Country of residence of the user"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "maria@gmail.com",
              "description": "Email address of the user"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "password",
              "description": "Password for the user account"
            },
            "confirmPassword": {
              "type": "string",
              "format": "password",
              "example": "password",
              "description": "Confirmation of the password for the user account"
            }
          },
          "required": ["firstName", "lastName", "birthDate", "email", "password", "confirmPassword"],
          "description": "A schema for user creation request data"
        },
        "LoginUserRequest": {
          "type": "object",
          "required": ["email", "password"],
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "description": "The user's email address for login"
            },
            "password": {
              "type": "string",
              "format": "password",
              "description": "The user's password for login"
            }
          }
        },
        "LoginUserResponse": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "JWT token for authentication"
            },
            "firstName": {
              "type": "string",
              "description": "The first name of the user"
            },
            "lastName": {
              "type": "string",
              "description": "The last name of the user"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "The email of the user"
            }
          }
        },
        "ValidationError": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "Validation Error"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "The field associated with the validation error"
                  },
                  "message": {
                    "type": "string",
                    "description": "The message describing the validation error"
                  }
                }
              }
            }
          }
        },
        "CreateEvent": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the event"
            },
            "dayOfWeek": {
              "type": "string",
              "enum": ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"],
              "description": "Day of the week for the event"
            },
            "userId": {
              "type": "string",
              "description": "ID of the user associated with the event"
            }
          },
          "required": ["description", "dayOfWeek", "userId"]
        },
        "Event": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the event"
            },
            "description": {
              "type": "string",
              "description": "Description of the event"
            },
            "dayOfWeek": {
              "type": "string",
              "description": "Day of the week when the event occurs"
            },
            "userId": {
              "type": "string",
              "description": "The ID of the user who created the event"
            }
          }
        },
        "UnauthorizedError": {
          "type": "object",
          "properties": {
            "statusCode": {
              "type": "integer",
              "format": "int32",
              "example": 401
            },
            "error": {
              "type": "string",
              "example": "Unauthorized"
            },
            "message": {
              "type": "string",
              "example": "Not authenticated"
            }
          }
        },
        "NotFoundError": {
          "type": "object",
          "properties": {
            "statusCode": {
              "type": "integer",
              "format": "int32",
              "example": 404
            },
            "error": {
              "type": "string",
              "example": "Not Found"
            },
            "message": {
              "type": "string",
              "example": "No events found"
            }
          }
        },
        "InternalServerError": {
          "type": "object",
          "properties": {
            "statusCode": {
              "type": "integer",
              "format": "int32",
              "example": 500
            },
            "error": {
              "type": "string",
              "example": "Internal Server Error"
            },
            "message": {
              "type": "string",
              "example": "Something went wrong"
            }
          }
        }
      }
    }
  }
  